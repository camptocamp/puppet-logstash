#!/bin/bash
#
# File managed by puppet
#
### BEGIN INIT INFO
# Provides:          logstash-<%= @logstash_name %>
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts logstash-<%= @logstash_name %>
# Description:       Starts logstash-<%= @logstash_name %> using start-stop-daemon
### END INIT INFO

set -e

PATH=/bin:/usr/bin:/sbin:/usr/sbin
NAME=logstash-<%= @logstash_name %>
DESC="Logstash <%= @logstash_name %> agent"
DEFAULT=/etc/default/$NAME

if [ `id -u` -ne 0 ]; then
   echo "You need root privileges to run this script"
   exit 1
fi

. /lib/lsb/init-functions

if [ -r /etc/default/rcS ]; then
   . /etc/default/rcS
fi

LS_HOME=<%= scope.lookupvar('::logstash::home') %>
LS_USER=<%= scope.lookupvar('::logstash::user') %>
LS_GROUP=<%= scope.lookupvar('::logstash::group') %>
LS_CONF_FILE=<%= scope.lookupvar('::logstash::etc') %>/<%= @logstash_name %>.conf
LS_LOG_FILE=<%= scope.lookupvar('::logstash::log') %>/<%= @logstash_name %>.log
PLUGINS_DIR=<%= scope.lookupvar('::logstash::plugins') %>

LS_JAVA_OPTS="<%= @java_opts %>"
LS_JAVA_ARGS="-jar ${LS_HOME}/logstash.jar agent -f ${LS_CONF_FILE} -l ${LS_LOG_FILE} --pluginpath ${PLUGINS_DIR}"

PID_FILE=/var/run/$NAME.pid

case "$1" in
   start)

      log_daemon_msg "Starting $DESC"
   
      if start-stop-daemon --test --start --pidfile "$PID_FILE" \
         --user "$LS_USER" --exec "/usr/bin/java" \
      >/dev/null; then
         # Prepare environment
         touch "$PID_FILE" && chown "$LS_USER":"$LS_GROUP" "$PID_FILE"
         ulimit -n 65535

         # Start Daemon
         start-stop-daemon --start -b --user "$LS_USER" -c "$LS_USER":"$LS_USER" -d "$LS_HOME" --pidfile "$PID_FILE" --make-pidfile --exec "/usr/bin/java" -- $LS_JAVA_OPTS $LS_JAVA_ARGS

         sleep 1

         if start-stop-daemon --test --start --pidfile "$PID_FILE" \
            --user "$LS_USER" --exec "/usr/bin/java" \
         >/dev/null; then

            if [ -f "$PID_FILE" ]; then
               rm -f "$PID_FILE"
            fi

            log_end_msg 1
         else
            log_end_msg 0
         fi
      else
         log_progress_msg "(already running)"
         log_end_msg 0
      fi
   ;;    
   stop)
      log_daemon_msg "Stopping $DESC"

      set +e

      if [ -f "$PID_FILE" ]; then 
         start-stop-daemon --stop --pidfile "$PID_FILE" \
            --user "$LS_USER" \
            --retry=TERM/20/KILL/5 >/dev/null

         if [ $? -eq 1 ]; then
            log_progress_msg "$DESC is not running but pid file exists, cleaning up"
         elif [ $? -eq 3 ]; then
            PID="`cat $PID_FILE`"
            log_failure_msg "Failed to stop $DESC (pid $PID)"
            exit 1
         fi

         rm -f "$PID_FILE"
      else
         log_progress_msg "(not running)"
      fi

      log_end_msg 0
      set -e
   ;;
   status)
      set +e

      start-stop-daemon --test --start --pidfile "$PID_FILE" \
         --user "$LS_USER" --exec "/usr/bin/java" \
      >/dev/null 2>&1

      if [ "$?" = "0" ]; then
         if [ -f "$PID_FILE" ]; then
            log_success_msg "$DESC is not running, but pid file exists."
            exit 1
         else
            log_success_msg "$DESC is not running."
            exit 3
         fi
      else
         log_success_msg "$DESC is running with pid `cat $PID_FILE`"
      fi

      set -e
   ;;
   restart|force-reload)
      if [ -f "$PID_FILE" ]; then
         $0 stop
         sleep 1
      fi

      $0 start
   ;;
   *)
      log_success_msg "Usage: $0 {start|stop|restart|force-reload|status}"
      exit 1
   ;;
esac

exit 0

